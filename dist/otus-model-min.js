!function(){"use strict";angular.module("otusjs.metadata",[])}(),function(){"use strict";angular.module("otusjs.misc",[])}(),function(){"use strict";angular.module("otusjs.navigation",[])}(),function(){"use strict";angular.module("otusjs.pageItem",[])}(),function(){"use strict";angular.module("otusjs.question",[])}(),function(){"use strict";angular.module("otusjs.survey",[])}(),function(){"use strict";angular.module("otusjs",["otusjs.metadata","otusjs.misc","otusjs.navigation","otusjs.pageItem","otusjs.question","otusjs.survey","utils"])}(),function(){"use strict";function ModelFacadeService(QuestionFactory,LabelFactory,UnitFactory,SurveyFactory,SurveyIdentityFactory,MetadataGroupFactory){function getQuestionFactory(){return QuestionFactory}function getLabelFactory(){return LabelFactory}function getUnitFactory(){return UnitFactory}function getSurveyFactory(){return SurveyFactory}function getSurveyIdentityFactory(){return SurveyIdentityFactory}function getMetadataGroupFactory(){return MetadataGroupFactory}var self=this;self.getQuestionFactory=getQuestionFactory,self.getLabelFactory=getLabelFactory,self.getUnitFactory=getUnitFactory,self.getSurveyFactory=getSurveyFactory,self.getSurveyIdentityFactory=getSurveyIdentityFactory,self.getMetadataGroupFactory=getMetadataGroupFactory}angular.module("otusjs").service("ModelFacadeService",ModelFacadeService),ModelFacadeService.$inject=["QuestionFactory","LabelFactory","UnitFactory","SurveyFactory","SurveyIdentityFactory","MetadataGroupFactory"]}(),function(){"use strict";function AddMetadataAnswerService(WorkspaceService,MetadataAnswerFactory){function execute(question){var metadataOption=MetadataAnswerFactory.create(question.metadata.option.length,question.templateID);return question.metadata.addOption(metadataOption),metadataOption}var self=this;self.execute=execute}angular.module("otusjs.metadata").service("AddMetadataAnswerService",AddMetadataAnswerService),AddMetadataAnswerService.$inject=["WorkspaceService","MetadataAnswerFactory"]}(),function(){"use strict";function RemoveMetadataOptionService(){function execute(question){question.metadata.removeLastOption()}var self=this;self.execute=execute}angular.module("otusjs.metadata").service("RemoveMetadataOptionService",RemoveMetadataOptionService)}(),function(){"use strict";function AddRouteConditionService(WorkspaceService,RouteConditionFactory){function execute(conditionName,route){var routeCondition=RouteConditionFactory.create(conditionName);return route.addCondition(routeCondition),routeCondition}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("AddRouteConditionService",AddRouteConditionService),AddRouteConditionService.$inject=["WorkspaceService","RouteConditionFactory"]}(),function(){"use strict";function AddRouteService(WorkspaceService,RouteFactory){function execute(routeData){var route=RouteFactory.create(routeData.name,routeData.parentNavigation.origin,routeData.destination);return routeData.parentNavigation.addRoute(route),route}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("AddRouteService",AddRouteService),AddRouteService.$inject=["WorkspaceService","RouteFactory"]}(),function(){"use strict";function AddRuleService(WorkspaceService,RuleFactory){function execute(ruleData,route){var newRule=RuleFactory.create(ruleData.when,ruleData.operator,ruleData.answer);return route.conditionSet[0].addRule(newRule),newRule}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("AddRuleService",AddRuleService),AddRuleService.$inject=["WorkspaceService","RuleFactory"]}(),function(){"use strict";function RemoveRouteService(){function execute(routeData){routeData.parentNavigation.removeRoute(routeData.name)}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("RemoveRouteService",RemoveRouteService)}(),function(){"use strict";function RemoveRuleService(){function execute(rule,route){route.conditionSet[0].removeRule(rule)}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("RemoveRuleService",RemoveRuleService)}(),function(){"use strict";function AddPageItemService(WorkspaceService,PageItemFactory){function execute(itemType){var survey=WorkspaceService.getSurvey(),newItem=PageItemFactory.create(itemType,survey.identity.acronym+survey.questionsCount());return survey.addQuestion(newItem),newItem}var self=this;self.execute=execute}angular.module("otusjs.pageItem").service("AddPageItemService",AddPageItemService),AddPageItemService.$inject=["WorkspaceService","PageItemFactory"]}(),function(){"use strict";function AddAnswerOptionService(WorkspaceService,AnswerOptionFactory){function execute(question){var answerOption=AnswerOptionFactory.create(question.option.length,question.templateID);return question.addOption(answerOption),answerOption}var self=this;self.execute=execute}angular.module("otusjs.question").service("AddAnswerOptionService",AddAnswerOptionService),AddAnswerOptionService.$inject=["WorkspaceService","AnswerOptionFactory"]}(),function(){"use strict";function AddQuestionService(WorkspaceService,QuestionFactory){function execute(questionType){return WorkspaceService.getSurvey().addQuestion(questionType)}var self=this;self.execute=execute}angular.module("otusjs.question").service("AddQuestionService",AddQuestionService),AddQuestionService.$inject=["WorkspaceService","QuestionFactory"]}(),function(){"use strict";function RemoveAnswerOptionService(){function execute(question){question.removeLastOption()}var self=this;self.execute=execute}angular.module("otusjs.question").service("RemoveAnswerOptionService",RemoveAnswerOptionService)}(),function(){"use strict";function RemoveQuestionService(){function execute(question,survey){survey.removeQuestion(question.templateID)}var self=this;self.execute=execute}angular.module("otusjs.question").service("RemoveQuestionService",RemoveQuestionService)}(),function(){"use strict";function UpdateQuestionService(WorkspaceService,QuestionFactory){function execute(data){var survey=WorkspaceService.getSurvey();return survey.updateQuestion(data.ngModel),data}var self=this;self.execute=execute}angular.module("otusjs.question").service("UpdateQuestionService",UpdateQuestionService),UpdateQuestionService.$inject=["WorkspaceService","QuestionFactory"]}(),function(){"use strict";function MetadataAnswerFactory(LabelFactory){function create(value,parentQuestionID){return new MetadataAnswer(value,parentQuestionID,LabelFactory)}var self=this;return self.create=create,self}function MetadataAnswer(value,parentQuestionID,LabelFactory){var self=this;self["extends"]="StudioObject",self.objectType="MetadataAnswer",self.value=value,self.parentQuestionID=parentQuestionID,self.dataType="Integer",self.label={ptBR:LabelFactory.create(),enUS:LabelFactory.create(),esES:LabelFactory.create()}}angular.module("otusjs.metadata").factory("MetadataAnswerFactory",MetadataAnswerFactory),MetadataAnswerFactory.$inject=["LabelFactory"]}(),function(){"use strict";function MetadataGroupFactory(MetadataAnswerFactory){function create(name,questionOID){return new MetadataGroup(name,questionOID)}var self=this;return self.create=create,self}function MetadataGroup(name,questionOID){function addOption(option){self.option.push(option)}function removeOption(option){var indexToRemove=0;self.option.forEach(function(o){o.value!==option.value&&++indexToRemove}),self.option.splice(indexToRemove,1)}function removeLastOption(){self.option.splice(-1,1)}var self=this;self.extents="StudioObject",self.objectType="MetadataGroup",self.name=name,self.parentQuestion=questionOID,self.option=[],self.addOption=addOption,self.removeOption=removeOption,self.removeLastOption=removeLastOption}angular.module("otusjs.metadata").factory("MetadataGroupFactory",MetadataGroupFactory),MetadataGroupFactory.$inject=["MetadataAnswerFactory"]}(),function(){"use strict";function LabelFactory(){function create(){return new Label}var self=this;return self.create=create,self}function Label(){Object.defineProperty(this,"extends",{value:"StudioObject",writable:!1,enumerable:!0}),Object.defineProperty(this,"objectType",{value:"Label",writable:!1,enumerable:!0}),Object.defineProperty(this,"oid",{value:"",writable:!1,enumerable:!0}),Object.defineProperty(this,"plainText",{value:"",writable:!0,enumerable:!0}),Object.defineProperty(this,"formattedText",{value:"",writable:!0,enumerable:!0})}angular.module("otusjs.misc").factory("LabelFactory",LabelFactory)}(),function(){"use strict";function UnitFactory(){function create(){return new Unit}var self=this;return self.create=create,self}function Unit(){Object.defineProperty(this,"extends",{value:"StudioObject",writable:!1,enumerable:!0}),Object.defineProperty(this,"objectType",{value:"Unit",writable:!1,enumerable:!0}),Object.defineProperty(this,"oid",{value:"",writable:!1,enumerable:!0}),Object.defineProperty(this,"plainText",{value:"",writable:!0,enumerable:!0}),Object.defineProperty(this,"formattedText",{value:"",writable:!0,enumerable:!0})}angular.module("otusjs.misc").factory("UnitFactory",UnitFactory)}(),function(){"use strict";function NavigationFactory(RouteFactory){function create(origin,destination){var navigation=new Navigation(origin);if(destination){var defaultRoute=RouteFactory.create("1",navigation.origin,destination);navigation.addRoute(defaultRoute)}return navigation}var self=this;return self.create=create,self}function Navigation(origin){function listRoutes(){var clone=[];return self.routes.forEach(function(route){clone.push(route)}),clone}function addRoute(route){self.routes.push(route)}function removeRoute(name){var routeToRemove=self.routes.filter(function(route){return route.name===name}),indexToRemove=self.routes.indexOf(routeToRemove[0]);return indexToRemove>-1&&self.routes.splice(indexToRemove,1),routeToRemove[0]}function updateRoute(route){self.routes.forEach(function(currentRoute){currentRoute.index===route.index&&(self.routes[currentRoute.index]=route)})}function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.origin=self.origin,json.routes=[],self.routes.forEach(function(route){json.routes.push(route.toJson())}),JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="Navigation",self.origin=origin,self.routes=[],self.listRoutes=listRoutes,self.addRoute=addRoute,self.removeRoute=removeRoute,self.updateRoute=updateRoute,self.toJson=toJson}angular.module("otusjs.navigation").factory("NavigationFactory",NavigationFactory),NavigationFactory.$inject=["RouteFactory"]}(),function(){"use strict";function RouteConditionFactory(){function create(name){return new RouteCondition(name)}var self=this;return self.create=create,self}function RouteCondition(conditionName){function listRules(){var clone=[];return self.rules.forEach(function(rule){clone.push(rule)}),clone}function addRule(rule){var ruleNotExist=-1===self.rules.indexOf(rule);ruleNotExist&&self.rules.push(rule)}function removeRule(rule){var indexToRemove=self.rules.indexOf(rule);self.rules.splice(indexToRemove,1)}function toJson(){var json={extents:"StudioObject",objectType:"RouteCondition",name:self.name,rules:[]};return self.rules.forEach(function(rule){json.rules.push(rule.toJson())}),JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="RouteCondition",self.name=conditionName,self.rules=[],self.listRules=listRules,self.addRule=addRule,self.removeRule=removeRule,self.toJson=toJson}angular.module("otusjs.navigation").factory("RouteConditionFactory",RouteConditionFactory)}(),function(){"use strict";function RouteFactory(){function create(name,origin,destination){return new Route(name,origin,destination)}var self=this;return self.create=create,self}function Route(routeName,routeOrigin,routeDestination){function getConditionSet(){var clone=[];return self.conditionSet.forEach(function(condition){clone.push(condition)}),clone}function getConditionSetSize(){return getConditionSet().length}function addCondition(condition){condition.name+=getConditionSetSize()+1,self.conditionSet.push(condition)}function removeCondition(condition){var conditionToRemove=self.conditionSet.filter(function(condition){return condition.name===name}),indexToRemove=self.conditionSet.indexOf(conditionToRemove[0]);return indexToRemove>-1&&self.conditionSet.splice(indexToRemove,1),conditionToRemove[0]}function toJson(){var json={extents:self.extents,objectType:self.objectType,name:self.name,origin:self.origin,destination:self.destination,index:self.index};if(self.conditionSet){json.conditionSet={};for(var conditionName in self.conditionSet)json.conditionSet[conditionName]=self.conditionSet[conditionName].toJson()}return JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="Route",self.origin=routeOrigin,self.destination=routeDestination,self.conditionSet=[],self.name=routeName,self.getConditionSet=getConditionSet,self.addCondition=addCondition,self.removeCondition=removeCondition,self.getConditionSetSize=getConditionSetSize,self.toJson=toJson}angular.module("otusjs.navigation").factory("RouteFactory",RouteFactory)}(),function(){"use strict";function RuleFactory(){function create(when,operator,answer){return new Rule(when,operator,answer)}var self=this;return self.create=create,self}function Rule(when,operator,answer){function within(arrayValues){defineAnswer("within",arrayValues)}function equal(value){defineAnswer("equal",value)}function greater(value){defineAnswer("greater",value)}function greaterEqual(value){defineAnswer("greaterEqual",value)}function lower(value){defineAnswer("lower",value)}function lowerEqual(value){defineAnswer("lowerEqual",value)}function between(start,end){Array.isArray(start)?defineAnswer("between",start):defineAnswer("between",[start,end])}function contains(value){defineAnswer("contains",value)}function defineAnswer(operator,value){answer={},answer[operator]=value}function toJson(){var json={when:when,operator:operator,answer:answer};return JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="Rule",self.when=when,self.answer=answer,self.operator=operator,self.within=within,self.equal=equal,self.greater=greater,self.greaterEqual=greaterEqual,self.lower=lower,self.lowerEqual=lowerEqual,self.between=between,self.contains=contains,self.toJson=toJson}angular.module("otusjs.navigation").factory("RuleFactory",RuleFactory)}(),function(){"use strict";function NavigationAddService(NavigationContainerService,QuestionContainerService){function execute(){var questionCount=QuestionContainerService.getQuestionListSize();if(questionCount>1){var origin=QuestionContainerService.getQuestionByPosition(questionCount-2),destination=QuestionContainerService.getQuestionByPosition(questionCount-1);NavigationContainerService.createNavigationTo(origin.templateID,destination.templateID)}}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("NavigationAddService",NavigationAddService),NavigationAddService.$inject=["NavigationContainerService","QuestionContainerService"]}(),function(){"use strict";function NavigationContainerService(NavigationFactory){function init(){navigationList=[]}function manageNavigation(navigationToManage){navigationList=navigationToManage}function getNavigationList(){return navigationList}function getNavigationListSize(){return navigationList.length}function getNavigationByOrigin(origin){var filter=navigationList.filter(function(navigation){return findByOrigin(navigation,origin)});return filter[0]}function getNavigationByPosition(position){return navigationList[position]}function getNavigationPosition(origin){var navigation=getNavigationByOrigin(origin);return navigation?navigationList.indexOf(navigation):null}function existsNavigationTo(origin){return!!getNavigationByOrigin(origin)}function createNavigationTo(origin,destination){navigationList.push(NavigationFactory.create(origin,destination))}function removeNavigationOf(questionID){var navigationToRemove=navigationList.filter(function(navigation){return findByOrigin(navigation,questionID)}),indexToRemove=navigationList.indexOf(navigationToRemove[0]);indexToRemove>-1&&navigationList.splice(indexToRemove,1)}function removeNavigationByIndex(indexToRemove){navigationList.splice(indexToRemove,1)}function removeCurrentLastNavigation(indexToRemove){navigationList.splice(-1,1)}function findByOrigin(navigation,questionID){return navigation.origin===questionID}var self=this,navigationList=[];self.init=init,self.manageNavigation=manageNavigation,self.getNavigationByOrigin=getNavigationByOrigin,self.getNavigationByPosition=getNavigationByPosition,self.getNavigationPosition=getNavigationPosition,self.getNavigationList=getNavigationList,self.getNavigationListSize=getNavigationListSize,self.existsNavigationTo=existsNavigationTo,self.createNavigationTo=createNavigationTo,self.removeNavigationOf=removeNavigationOf,self.removeNavigationByIndex=removeNavigationByIndex,self.removeCurrentLastNavigation=removeCurrentLastNavigation}angular.module("otusjs.navigation").service("NavigationContainerService",NavigationContainerService),NavigationContainerService.$inject=["NavigationFactory"]}(),function(){"use strict";function NavigationManagerService(NavigationContainerService,NavigationAddService,NavigationRemoveService){function init(){NavigationContainerService.init()}function getNavigationList(){return NavigationContainerService.getNavigationList()}function getNavigationByOrigin(origin){return NavigationContainerService.getNavigationByOrigin(origin)}function addNavigation(){NavigationAddService.execute()}function removeNavigation(templateID){NavigationRemoveService.execute(templateID)}var self=this;self.init=init,self.getNavigationList=getNavigationList,self.getNavigationByOrigin=getNavigationByOrigin,self.addNavigation=addNavigation,self.removeNavigation=removeNavigation}angular.module("otusjs.navigation").service("NavigationManagerService",NavigationManagerService),NavigationManagerService.$inject=["NavigationContainerService","NavigationAddService","NavigationRemoveService"]}(),function(){"use strict";function NavigationRemoveService(NavigationContainerService){function execute(templateID){if(NavigationContainerService.existsNavigationTo(templateID)){var navigationToRecicle=NavigationContainerService.getNavigationByOrigin(templateID),positionToRecicle=NavigationContainerService.getNavigationPosition(templateID);if(positionToRecicle&&0!==positionToRecicle){var navigationToUpdate=NavigationContainerService.getNavigationByPosition(positionToRecicle-1);navigationToUpdate.routes[0].destination=navigationToRecicle.routes[0].destination}NavigationContainerService.removeNavigationOf(templateID)}else NavigationContainerService.removeCurrentLastNavigation()}var self=this;self.execute=execute}angular.module("otusjs.navigation").service("NavigationRemoveService",NavigationRemoveService),NavigationRemoveService.$inject=["NavigationContainerService"]}(),function(){"use strict";function ImageItemFactory(LabelFactory){function create(templateID,prototype){return new ImageItem(templateID,prototype,LabelFactory)}var self=this;return self.create=create,self}function ImageItem(templateID,prototype,LabelFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.url=self.url,json.footer=self.footer,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="ImageItem",self.templateID=templateID,self.dataType="String",self.url="",self.footer={ptBR:LabelFactory.create(),enUS:LabelFactory.create(),esES:LabelFactory.create()},self.toJson=toJson}angular.module("otusjs.pageItem").factory("ImageItemFactory",ImageItemFactory),ImageItemFactory.$inject=["LabelFactory"]}(),function(){"use strict";function PageItemFactory(TextItemFactory,ImageItemFactory){function create(itemType,templateID){var item=new PageItem(templateID);return factoryMap[itemType].create(templateID,item)}var self=this,factoryMap={TextItem:TextItemFactory,ImageItem:ImageItemFactory};return self.create=create,self}function PageItem(templateID){var self=this;self.extents="StudioObject",self.objectType="PageItem",self.templateID=templateID}angular.module("otusjs.pageItem").factory("PageItemFactory",PageItemFactory),PageItemFactory.$inject=["TextItemFactory","ImageItemFactory"]}(),function(){"use strict";function TextItemFactory(LabelFactory){function create(templateID,prototype){return new TextItem(templateID,prototype,LabelFactory)}var self=this;return self.create=create,self}function TextItem(templateID,prototype,LabelFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.value=self.value,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="TextItem",self.templateID=templateID,self.dataType="String",self.value={ptBR:LabelFactory.create(),enUS:LabelFactory.create(),esES:LabelFactory.create()},self.toJson=toJson}angular.module("otusjs.pageItem").factory("TextItemFactory",TextItemFactory),TextItemFactory.$inject=["LabelFactory"]}(),function(){"use strict";function AnswerOptionFactory(LabelFactory){function create(value,parentQuestionID){return new QuestionAnswerOption(value,parentQuestionID,LabelFactory)}var self=this;return self.create=create,self}function QuestionAnswerOption(value,parentQuestionID,LabelFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.value=self.value,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,json.parentQuestionID=self.parentQuestionID,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="AnswerOption",self.value=value,self.dataType="Integer",self.label={ptBR:LabelFactory.create(),enUS:LabelFactory.create(),esES:LabelFactory.create()},self.parentQuestionID=parentQuestionID,self.toJson=toJson}angular.module("otusjs.question").factory("AnswerOptionFactory",AnswerOptionFactory),AnswerOptionFactory.$inject=["LabelFactory"]}(),function(){"use strict";function CalendarQuestionFactory(){function create(templateID,prototype){return new CalendarQuestion(templateID,prototype)}var self=this;return self.create=create,self}function CalendarQuestion(templateID,prototype){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="CalendarQuestion",self.templateID=templateID,self.dataType="LocalDate",self.label=prototype.label,self.metadata=prototype.metadata,self.toJson=toJson}angular.module("otusjs.question").factory("CalendarQuestionFactory",CalendarQuestionFactory)}(),function(){"use strict";function DecimalQuestionFactory(UnitFactory){function create(templateID,prototype){return new DecimalQuestion(templateID,prototype,UnitFactory)}var self=this;return self.create=create,self}function DecimalQuestion(templateID,prototype,UnitFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,json.unit=self.unit,JSON.stringify(json)}var self=this;self.extents=prototype.objectType,self.objectType="DecimalQuestion",self.templateID=templateID,self.dataType="Decimal",self.label=prototype.label,self.metadata=prototype.metadata,self.unit={ptBR:UnitFactory.create(),enUS:UnitFactory.create(),esES:UnitFactory.create()},self.toJson=toJson}angular.module("otusjs.question").factory("DecimalQuestionFactory",DecimalQuestionFactory),DecimalQuestionFactory.$inject=["UnitFactory"]}(),function(){"use strict";function EmailQuestionFactory(){function create(templateID,prototype){return new EmailQuestion(templateID,prototype)}var self=this;return self.create=create,self}function EmailQuestion(templateID,prototype){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="EmailQuestion",self.templateID=templateID,self.dataType="String",self.label=prototype.label,self.metadata=prototype.metadata,self.toJson=toJson}angular.module("otusjs.question").factory("EmailQuestionFactory",EmailQuestionFactory)}(),function(){"use strict";function IntegerQuestionFactory(UnitFactory){function create(templateID,prototype){return new IntegerQuestion(templateID,prototype,UnitFactory)}var self=this;return self.create=create,self}function IntegerQuestion(templateID,prototype,UnitFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,json.unit=self.unit,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="IntegerQuestion",self.templateID=templateID,self.dataType="Integer",self.label=prototype.label,self.metadata=prototype.metadata,self.unit={ptBR:UnitFactory.create(),enUS:UnitFactory.create(),esES:UnitFactory.create()},self.toJson=toJson}angular.module("otusjs.question").factory("IntegerQuestionFactory",IntegerQuestionFactory),IntegerQuestionFactory.$inject=["UnitFactory"]}(),function(){"use strict";function PhoneQuestionFactory(UnitFactory){function create(templateID,prototype){return new PhoneQuestion(templateID,prototype,UnitFactory)}var self=this;return self.create=create,self}function PhoneQuestion(templateID,prototype,UnitFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,json.unit=self.unit,JSON.stringify(json)}var self=this;self.extents=prototype.objectType,self.objectType="PhoneQuestion",self.templateID=templateID,self.dataType="Integer",self.label=prototype.label,self.metadata=prototype.metadata,self.unit={ptBR:UnitFactory.create(),enUS:UnitFactory.create(),esES:UnitFactory.create()},self.toJson=toJson}angular.module("otusjs.question").factory("PhoneQuestionFactory",PhoneQuestionFactory),PhoneQuestionFactory.$inject=["UnitFactory"]}(),function(){"use strict";function QuestionFactory(CalendarQuestionFactory,IntegerQuestionFactory,DecimalQuestionFactory,SingleSelectionQuestionFactory,TextQuestionFactory,TimeQuestionFactory,EmailQuestionFactory,LabelFactory,MetadataGroupFactory,PhoneQuestionFactory){function create(questionType,templateID){var question=new Question(templateID,LabelFactory,MetadataGroupFactory);return factoryMap[questionType].create(templateID,question)}var self=this,factoryMap={CalendarQuestion:CalendarQuestionFactory,IntegerQuestion:IntegerQuestionFactory,DecimalQuestion:DecimalQuestionFactory,SingleSelectionQuestion:SingleSelectionQuestionFactory,TextQuestion:TextQuestionFactory,TimeQuestion:TimeQuestionFactory,EmailQuestion:EmailQuestionFactory,PhoneQuestion:PhoneQuestionFactory};return self.create=create,self}function Question(templateID,LabelFactory,MetadataGroupFactory){var self=this;self.extents="StudioObject",self.objectType="Question",self.templateID=templateID,self.label={ptBR:LabelFactory.create(),enUS:LabelFactory.create(),esES:LabelFactory.create()},self.metadata=MetadataGroupFactory.create()}angular.module("otusjs.question").factory("QuestionFactory",QuestionFactory),QuestionFactory.$inject=["CalendarQuestionFactory","IntegerQuestionFactory","DecimalQuestionFactory","SingleSelectionQuestionFactory","TextQuestionFactory","TimeQuestionFactory","EmailQuestionFactory","LabelFactory","MetadataGroupFactory","PhoneQuestionFactory"]}(),function(){"use strict";function SingleSelectionQuestionFactory(AnswerOptionFactory){function create(templateID,prototype){return new SingleSelectionQuestion(templateID,prototype,AnswerOptionFactory)}var self=this;return self.create=create,self}function SingleSelectionQuestion(templateID,prototype,AnswerOptionFactory){function addOption(option){self.option.push(option)}function removeLastOption(){self.option.splice(-1)}function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.option=self.option,json.metadata=self.metadata,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="SingleSelectionQuestion",self.templateID=templateID,self.dataType="Integer",self.label=prototype.label,self.option=[],self.metadata=prototype.metadata,self.addOption=addOption,self.removeLastOption=removeLastOption,self.toJson=toJson}angular.module("otusjs.question").factory("SingleSelectionQuestionFactory",SingleSelectionQuestionFactory),SingleSelectionQuestionFactory.$inject=["AnswerOptionFactory"]}(),function(){"use strict";function TextQuestionFactory(){function create(templateID,prototype){return new TextQuestion(templateID,prototype)}var self=this;return self.create=create,self}function TextQuestion(templateID,prototype){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="TextQuestion",self.templateID=templateID,self.dataType="String",self.label=prototype.label,self.metadata=prototype.metadata,self.toJson=toJson}angular.module("otusjs.question").factory("TextQuestionFactory",TextQuestionFactory)}(),function(){"use strict";function TimeQuestionFactory(UnitFactory){function create(templateID,prototype){return new TimeQuestion(templateID,prototype,UnitFactory)}var self=this;return self.create=create,self}function TimeQuestion(templateID,prototype,UnitFactory){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.templateID=self.templateID,json.dataType=self.dataType,json.label=self.label,json.metadata=self.metadata,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents=prototype.objectType,self.objectType="TimeQuestion",self.templateID=templateID,self.dataType="LocalTime",self.label=prototype.label,self.metadata=prototype.metadata,self.toJson=toJson}angular.module("otusjs.question").factory("TimeQuestionFactory",TimeQuestionFactory),TimeQuestionFactory.$inject=["UnitFactory"]}(),function(){"use strict";function QuestionAddService(QuestionContainerService){function execute(questionType,templateID){return QuestionContainerService.createQuestion(questionType,templateID)}var self=this;self.execute=execute}angular.module("otusjs.question").service("QuestionAddService",QuestionAddService),QuestionAddService.$inject=["QuestionContainerService"]}(),function(){"use strict";function QuestionContainerService(QuestionFactory){function init(){questionList=[]}function manageQuestions(questionsToManage){
questionList=questionsToManage}function getQuestionList(){return questionList}function getQuestionListSize(){return questionList.length}function getQuestionByTemplateID(templateID){var filter=questionList.filter(function(question){return findByOrigin(question,templateID)});return filter[0]}function getQuestionByPosition(position){return questionList[position]}function getQuestionPosition(templateID){var question=getQuestionByTemplateID(templateID);return question?questionList.indexOf(question):null}function existsQuestion(templateID){return!!getQuestionByTemplateID(templateID)}function createQuestion(questionType,templateID){var question=QuestionFactory.create(questionType,templateID);return questionList.push(question),question}function removeQuestion(templateID){var questionToRemove=questionList.filter(function(question){return findByOrigin(question,templateID)}),indexToRemove=questionList.indexOf(questionToRemove[0]);indexToRemove>-1&&questionList.splice(indexToRemove,1)}function removeQuestionByPosition(indexToRemove){questionList.splice(indexToRemove,1)}function removeCurrentLastQuestion(indexToRemove){questionList.splice(-1,1)}function findByOrigin(question,templateID){return question.templateID===templateID}var self=this,questionList=[];self.init=init,self.manageQuestions=manageQuestions,self.getQuestionByTemplateID=getQuestionByTemplateID,self.getQuestionByPosition=getQuestionByPosition,self.getQuestionPosition=getQuestionPosition,self.getQuestionList=getQuestionList,self.getQuestionListSize=getQuestionListSize,self.existsQuestion=existsQuestion,self.createQuestion=createQuestion,self.removeQuestion=removeQuestion,self.removeQuestionByPosition=removeQuestionByPosition,self.removeCurrentLastQuestion=removeCurrentLastQuestion}angular.module("otusjs.question").service("QuestionContainerService",QuestionContainerService),QuestionContainerService.$inject=["QuestionFactory"]}(),function(){"use strict";function QuestionManagerService(QuestionContainerService,QuestionAddService,QuestionRemoveService){function init(){QuestionContainerService.init()}function getQuestionList(){return QuestionContainerService.getQuestionList()}function getQuestionListSize(){return QuestionContainerService.getQuestionListSize()}function getQuestionByTemplateID(templateID){return QuestionContainerService.getQuestionByTemplateID(templateID)}function addQuestion(questionType,templateIDPrefix){var templateID=templateIDPrefix+getNextIncrementalGenerator(),question=QuestionAddService.execute(questionType,templateID);return question}function removeQuestion(templateID){QuestionRemoveService.execute(templateID)}function getNextIncrementalGenerator(){return console.log(incrementalIDValue),++incrementalIDValue}var self=this,incrementalIDValue=-1;self.init=init,self.getQuestionList=getQuestionList,self.getQuestionListSize=getQuestionListSize,self.getQuestionByTemplateID=getQuestionByTemplateID,self.addQuestion=addQuestion,self.removeQuestion=removeQuestion}angular.module("otusjs.question").service("QuestionManagerService",QuestionManagerService),QuestionManagerService.$inject=["QuestionContainerService","QuestionAddService","QuestionRemoveService"]}(),function(){"use strict";function QuestionRemoveService(QuestionContainerService){function execute(templateID){QuestionContainerService.removeQuestion(templateID)}var self=this;self.execute=execute}angular.module("otusjs.question").service("QuestionRemoveService",QuestionRemoveService),QuestionRemoveService.$inject=["QuestionContainerService"]}(),function(){"use strict";function SurveyFactory(SurveyIdentityFactory,SurveyMetaInfoFactory,SurveyUUIDGenerator,NavigationManagerService,QuestionManagerService){function create(name,acronym){var metainfo=SurveyMetaInfoFactory.create(),identity=SurveyIdentityFactory.create(name,acronym),UUID=SurveyUUIDGenerator.generateSurveyUUID();return new Survey(metainfo,identity,UUID,NavigationManagerService,QuestionManagerService)}var self=this;return self.create=create,self}function Survey(surveyMetainfo,surveyIdentity,uuid,NavigationManagerService,QuestionManagerService){function getQuestionByTemplateID(templateID){return self.QuestionManager.getQuestionByTemplateID(templateID)}function addQuestion(questionType){var question=self.QuestionManager.addQuestion(questionType,self.identity.acronym);return self.NavigationManager.addNavigation(),question}function removeQuestion(templateID){self.QuestionManager.removeQuestion(templateID),self.NavigationManager.removeNavigation(templateID)}function updateQuestion(question){self.navigationList[question.templateID]=question}function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.oid=self.oid,json.identity=self.identity.toJson(),json.metainfo=self.metainfo.toJson(),json.questionContainer=[],self.QuestionManager.getQuestionList().forEach(function(question){json.questionContainer.push(question.toJson())}),json.navigationList=[],NavigationManagerService.getNavigationList().forEach(function(navigation){json.navigationList.push(navigation.toJson())}),JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"").replace(/ ":/g,'":')}var self=this;self.extents="StudioObject",self.objectType="Survey",self.oid=uuid,self.identity=surveyIdentity,self.metainfo=surveyMetainfo,self.QuestionManager=QuestionManagerService,self.NavigationManager=NavigationManagerService,self.NavigationManager.init(),self.getQuestionByTemplateID=getQuestionByTemplateID,self.addQuestion=addQuestion,self.removeQuestion=removeQuestion,self.updateQuestion=updateQuestion,self.toJson=toJson}angular.module("otusjs.survey").factory("SurveyFactory",SurveyFactory),SurveyFactory.$inject=["SurveyIdentityFactory","SurveyMetaInfoFactory","SurveyUUIDGenerator","NavigationManagerService","QuestionManagerService"]}(),function(){"use strict";function SurveyIdentityFactory(){function create(name,acronym,version){return new SurveyIdentity(name,acronym,version)}var self=this;return self.create=create,self}function SurveyIdentity(name,acronym,version){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.name=self.name,json.acronym=self.acronym,json.recommendedTo=self.recommendedTo,json.description=self.description,json.keywords=self.keywords,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="SurveyIdentity",self.name=name,self.acronym=acronym,self.recommendedTo="",self.description="",self.keywords=[],self.toJson=toJson}angular.module("otusjs.survey").factory("SurveyIdentityFactory",SurveyIdentityFactory)}(),function(){"use strict";function SurveyMetaInfoFactory(){function create(){var now=Date.now();return new SurveyMetaInfo(now)}var self=this;return self.create=create,self}function SurveyMetaInfo(creationDatetime){function toJson(){var json={};return json.extents=self.extents,json.objectType=self.objectType,json.creationDatetime=self.creationDatetime,json.otusStudioVersion=self.otusStudioVersion,JSON.stringify(json).replace(/"{/g,"{").replace(/\}"/g,"}").replace(/\\/g,"")}var self=this;self.extents="StudioObject",self.objectType="SurveyMetaInfo",self.creationDatetime=creationDatetime,self.otusStudioVersion="",self.toJson=toJson}angular.module("otusjs.survey").factory("SurveyMetaInfoFactory",SurveyMetaInfoFactory)}();